{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","style","display","flexDirection","height","AppBar_default","position","Toolbar_default","Typography_default","color","variant","List_default","flex","overflow","Array","fill","map","x","i","ListItem_default","key","button","Avatar_default","Person_default","ListItemText_default","primary","secondary","BottomNavigation_default","value","BottomNavigationAction_default","label","icon","People_default","Language_default","BugReport_default","AirplanemodeActive_default","Motorcycle_default","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2ZAmDeA,MAlCf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,QAAS,OAAQC,cAAe,SAAUC,OAAQ,SAC7DN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAQO,SAAS,YACfR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,KACED,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAYU,MAAM,UAAUC,QAAQ,MAApC,eAKJZ,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAME,MAAO,CAACW,KAAM,EAAGC,SAAU,WAE/BC,MAAM,IAAIC,OAAOC,IAAI,SAACC,EAAGC,GAAJ,OACnBpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAUqB,IAAKF,EAAGG,QAAM,GACtBvB,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,KAAQD,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,OACRD,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CACE0B,QAAQ,SACRC,UAAU,+BAMlB5B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAkB6B,MAAM,UACtB9B,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAwB+B,MAAM,SAASF,MAAM,SAASG,KAAMjC,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,QAC5DD,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAwB+B,MAAM,UAAUF,MAAM,UAAUG,KAAMjC,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,QAC9DD,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAwB+B,MAAM,UAAUF,MAAM,UAAUG,KAAMjC,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,QAC9DD,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAwB+B,MAAM,YAAYF,MAAM,YAAYG,KAAMjC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,QAClED,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAwB+B,MAAM,WAAWF,MAAM,WAAWG,KAAMjC,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,WCnCpDsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECVNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5482bee9.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport PersonIcon from '@material-ui/icons/Person';\nimport PeopleIcon from '@material-ui/icons/People';\nimport PlanetsIcon from '@material-ui/icons/Language';\nimport SpeciesIcon from '@material-ui/icons/BugReport';\nimport StarshipsIcon from '@material-ui/icons/AirplanemodeActive';\nimport VehiclesIcon from '@material-ui/icons/Motorcycle';\n\nfunction App() {\n  return (\n    <div style={{display: 'flex', flexDirection: 'column', height: '100%'}}>\n      <AppBar position=\"relative\">\n        <Toolbar>\n          <Typography color=\"inherit\" variant=\"h6\">\n            Star Wars\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <List style={{flex: 1, overflow: 'scroll'}}>\n      {\n        Array(50).fill().map((x, i) => (\n          <ListItem key={i} button>\n            <Avatar><PersonIcon /></Avatar>\n            <ListItemText\n              primary=\"Person\"\n              secondary=\"Species from Homeworld\"\n            />\n          </ListItem>\n        ))\n      }\n      </List>\n      <BottomNavigation value=\"people\">\n        <BottomNavigationAction label=\"People\" value=\"people\" icon={<PeopleIcon />} />\n        <BottomNavigationAction label=\"Planets\" value=\"planets\" icon={<PlanetsIcon />} />\n        <BottomNavigationAction label=\"Species\" value=\"species\" icon={<SpeciesIcon />} />\n        <BottomNavigationAction label=\"Starships\" value=\"starships\" icon={<StarshipsIcon />} />\n        <BottomNavigationAction label=\"Vehicles\" value=\"vehicles\" icon={<VehiclesIcon />} />\n      </BottomNavigation>\n    </div>\n  )\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}